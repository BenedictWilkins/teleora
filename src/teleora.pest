
document = { SOI ~ goal* ~ EOI}
goal = { (goal_short | goal_long) }
goal_short = _{ compound ~ ":" ~ body}
goal_long = _{ compound ~ ":" ~ "{" ~ body ~ ("," ~ body)* ~ ","? ~ "}" }
body = { conditions ~ "->" ~  actions }
compound = { atom ~ "(" ~ arg? ~ ("," ~ arg)* ~ ")" } // at some point we could include basic arithmetic in goal compounders...? #/                                                                      
conditions = { lexpr? ~ ("," ~ lexpr)* } 
actions = { compound | atom | variable }

// used to parse observations (observations are sequences of grounded terms)
observation = { SOI ~ arg ~ ("," ~ arg)* ~ SILENT_EOI}


seq = { arg ~ ("," ~ arg)* }

arg = _{ expr }
obj_arg = { (atom | variable) ~ ":" ~ arg }
pipe_arg = { variable | list | ulist }

list   = { "[]" | "[" ~ seq ~ ("|" ~ pipe_arg)?  ~ "]"  }
ulist  = { "{}" | "{" ~ seq ~ ("|" ~ pipe_arg)?  ~ "}"  }
obj   = { "{" ~ obj_arg? ~ ("," ~ obj_arg)* ~ "}" }
collection = _{ list | ulist | obj }



expr = { atom | collection | prim ~ (bin_op ~ prim)* }
prim = _{ number | unary_op? ~ variable | unary_op? ~ "(" ~ expr ~ ")"  }

lexpr = { lprim ~ (lbin_op ~ lprim)? } 
lprim = _{ expr | prim | atom | collection } 

// unary operators
unary_op = _{ minus | not }
minus =     { "-" }
not =       { "!" }

// binary operators
lbin_op = _{ eq | gt | lt | gte | lte }                                 // comparison operators, cannot be chained         
bin_op = _{ add | subtract | multiply | divide | modulo | and | or }    // numerical and bool operators
gt =        { ">" }
lt =        { "<" }
eq =        { "=" }
gte =       { gt ~ eq }
lte =       { lt ~ eq }
and =       { "&&" }
or =        { "||" }
pipe =      { "|" }
add =       { "+" }
subtract =  { "-" }
multiply =  { "*" }
divide =    { "/" }
modulo =    { "%" }

atom = @{ ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC* }
variable = @{ ("_" | ASCII_ALPHA_UPPER) ~ ASCII_ALPHANUMERIC* }

number = _{ signed_float | signed_integer }
signed_integer = { minus? ~ integer }
signed_float = { minus? ~ float } 
integer = @{ ASCII_DIGIT }
float = @{ float_dot | float_exp }
float_dot  = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
float_exp  = @{ ASCII_DIGIT ~ "e" ~ ("+" | "-")? ~ ASCII_DIGIT+ } 

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
SILENT_EOI = _{ !ANY }